# -*- coding: utf-8 -*-
"""NeuralCrave.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QgesyYgax9rfu64UVdKwxSIC_RcqQT8-

## Load Data
"""

import pandas as pd
ff = pd.read_csv('/Users/sharanyanarendran/Desktop/updated_food_cravings_single_trigger.csv')
ff

df = ff.drop(columns=['menstrual_phase','craving_reason','emotional_eating_score','CRP_level','daily_energy_intake','carbohydrate_intake','protein_intake','fat_intake'])

df.head()

"""## Data changing

### converting sugar column 0/1
"""

# Create a new column 'high_sugar' where 1 = ≥50g/day, 0 = <50g/day
df["high_sugar"] = (df["sugar_intake"] >= 50).astype(int)

# Display modified dataset
df.head()





"""### converting food cravings from string to int vale

"""

unique_reasons = df["craving_trigger"].unique()
unique_reasons

mapping = {'Zinc Deficiency':0, 'Magnesium Deficiency':1, 'Iron Deficiency':2,
       'Hormonal Fluctuation':3, 'Other':4, 'Hormonal Changes':5,
       'Emotional/Stress Eating':6}
df['craving_trigger_int']= df['craving_trigger'].map(mapping)
df

unique_cravings = df["craving_type"].unique()
unique_cravings

mapping = {'Salty':0, 'Spicy':1, 'Sweet':2, 'Fruits':3, 'Fatty':4}
df['craving_type_int']= df['craving_type'].map(mapping)
df.head()

unique_sleepqual = df["sleep_quality"].unique()
unique_sleepqual

mapping = {'Good':2, 'Moderate':1, 'Poor':0}
df['sleepqual_int']= df['sleep_quality'].map(mapping)
df

unique_mhs = df["mental_health_status"].unique()
unique_mhs

mapping = {'Mild Anxiety':1, 'Depression':2, 'Stable':0}
df['mentalhealth_int']= df['mental_health_status'].map(mapping)
df.head()

unique_stress = df["stress_category"].unique()
unique_stress

mapping = {'High':2, 'Low':0, 'Moderate':1}
df['stress_int']= df['stress_category'].map(mapping)
df.head()

unique_meno = df["menopause"].unique()
unique_meno

mapping = {'No':0, 'Yes':1}
df['meno_int']= df['menopause'].map(mapping)
df.head()

unique_preg = df["pregnancy"].unique()
unique_preg

mapping = {'No':0, 'Yes':1}
df['preg_int']= df['pregnancy'].map(mapping)
df.head()

unique_mens = df["detailed_menstrual_phase"].unique()
unique_mens

mapping = {'Mid-Luteal':0, 'Ovulatory':1, 'Early Follicular':2, 'Late Follicular':3}
df['menstrual_int']= df['detailed_menstrual_phase'].map(mapping)
df.head()

unique_phys = df["physical_activity"].unique()
unique_phys

mapping = {'Sedentary':0, 'Active':2, 'Moderate':1}
df['physicalactivity_int']= df['physical_activity'].map(mapping)
df.head()

# Save the updated dataset
df.to_csv("food_cravings_menstrual_cycle_updated.csv", index=False)

print("Dataset updated and saved successfully!")

"""## Data preparation

### Data separation as X and Y
"""

y = df['craving_trigger_int']
y

x = df.drop(['craving_type','craving_trigger_int','sugar_intake','sleep_quality','stress_category','menopause','mental_health_status','pregnancy','physical_activity','detailed_menstrual_phase','craving_trigger','junk_food_addiction_score','stress_int','mentalhealth_int'],axis=1)
x

"""### Data Splitting

"""

from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x,y,test_size=0.2,random_state=100)

x_test

x_train

"""## Model building


"""### Random Forest"""

from sklearn.ensemble import RandomForestRegressor
rf = RandomForestRegressor(max_depth=2, random_state=100)
rf.fit(x_train, y_train)

"""### Applying the model to make a prediction"""

y_rf_train_pred = rf.predict(x_train)
y_rf_test_pred = rf.predict(x_test)



"""## Input and Prediction"""

import numpy as np
import pandas as pd
import requests
import math

# Define deficiency categories
deficiency_dict = {
    0: "Zinc Deficiency",
    1: "Magnesium Deficiency",
    2: "Iron Deficiency",
    3: "Hormonal Fluctuation",
    4: "Other",
    5: "Hormonal Changes",
    6: "Emotional/Stress Eating"
}


API_KEY = "your_nutritionix_api_key"  
url = "https://trackapi.nutritionix.com/v2/search/instant"
headers = {
    "x-app-id": '16195d7f',  
    "x-app-key": 'ffb43ec448cb4ca9d05736726d48cb1c'
}

# Nutrient mapping
nutrient_map = {
    "Zinc Deficiency": "zinc",
    "Magnesium Deficiency": "magnesium",
    "Iron Deficiency": "iron",
    "Hormonal Fluctuation": "hormone-balancing foods",
    "Hormonal Changes": "hormone-balancing foods",
    "Emotional/Stress Eating": "stress-reducing foods"
}

AVG_MAGNESIUM_LEVEL = 2.0
AVG_IRON_LEVEL = 100
AVG_ZINC_LEVEL = 95
AVG_VITD_LEVEL = 40
def get_user_input():
    def get_float_input(prompt, default_value):
        user_input = input(prompt).strip()
        return float(user_input) if user_input else default_value
    return pd.DataFrame([{

        "craving_intensity": get_float_input("Enter craving intensity (1-10): ", 5.0),
        "magnesium_level": get_float_input("Enter magnesium level (mg/dL) (Press Enter to use default): ", AVG_MAGNESIUM_LEVEL),
        "iron_level": get_float_input("Enter iron level (µg/dL) (Press Enter to use default): ", AVG_IRON_LEVEL),
        "zinc_level": get_float_input("Enter zinc level (µg/dL) (Press Enter to use default): ", AVG_ZINC_LEVEL),
        "vitamin_d_level": get_float_input("Enter vitamin D level (ng/mL) (Press Enter to use default): ", AVG_VITD_LEVEL),
        "stress_level": get_float_input("Enter stress level (1-10): ", 5),
        "sleep_hours": get_float_input("Enter sleep hours: ", 7.0),
        "BMI": get_float_input("Enter BMI: ", 22.0),
        "high_sugar": int(input("Do you consume high sugar? (0 = No, 1 = Yes): ").strip() or 0),
        "craving_type_int": int(input("Enter craving type (0-4): ").strip() or 1),
        "sleepqual_int": int(input("Enter sleep quality (0-5): ").strip() or 2),
        "meno_int": int(input("Are you in menopause? (0 = No, 1 = Yes): ").strip() or 0),
        "preg_int": int(input("Are you pregnant? (0 = No, 1 = Yes): ").strip() or 0),
        "menstrual_int": int(input("Enter the stage of your menstrual cycle? (0 to 3): ").strip() or 1),
        "physicalactivity_int": int(input("Physical activity level (0-10): ").strip() or 5)

    }])

def interpret_prediction(pred_value):
    closest_int = round(pred_value)  
    main_deficiency = deficiency_dict.get(closest_int, "Other")

    if math.isclose(pred_value, closest_int, abs_tol=0.3):
        
        related_deficiencies = {main_deficiency}

       
        if closest_int - 1 in deficiency_dict:
            related_deficiencies.add(deficiency_dict[closest_int - 1])
        if closest_int + 1 in deficiency_dict:
            related_deficiencies.add(deficiency_dict[closest_int + 1])

        return f"Maybe {main_deficiency}", list(related_deficiencies)
    else:
        return main_deficiency, [main_deficiency]

def get_dietary_suggestions(deficiencies):
    suggestions = {}
    for deficiency in deficiencies:
        nutrient = nutrient_map.get(deficiency, "healthy foods")
        params = {"query": f"foods high in {nutrient}"}

        response = requests.get(url, headers=headers, params=params)

        if response.status_code == 200:
            data = response.json()
            food_items = [item["food_name"] for item in data.get("common", [])[:5]]
            suggestions[deficiency] = food_items if food_items else ["No food suggestions found."]
        else:
            suggestions[deficiency] = [f"API Error: {response.status_code}"]

    return suggestions

# Get user input
df_input = get_user_input()


prediction = rf.predict(df_input)[0]


main_deficiency, related_deficiencies = interpret_prediction(prediction)


diet_suggestions = get_dietary_suggestions(related_deficiencies)


output_paragraph = f"Based on the analysis, your cravings may be linked to **{main_deficiency}**.\n"

if "Maybe" in main_deficiency:
    output_paragraph += "Since the prediction is not exact, you could also be experiencing:\n"
    for alt_def in related_deficiencies:
        if alt_def != main_deficiency:
            output_paragraph += f"- **{alt_def}**\n"

output_paragraph += "\n**Dietary Suggestions:**\n"
for deficiency, foods in diet_suggestions.items():
    food_list = ", ".join(foods)
    output_paragraph += f"- For **{deficiency}**, consider eating: {food_list}\n"

print("\n" + output_paragraph)